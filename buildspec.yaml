# Build specifications for AWS CodeBuild
#   See: https://docs.aws.amazon.com/codebuild/latest/userguide/build-spec-ref.html

# Each input artifact is extracted to its own directory by CodePipeline, the locations of which
# are stored in environment variables. The directory for the primary source artifact (this repo)
# is made available with $CODEBUILD_SRC_DIR. The directory for the DMPTool push artifacts is
# made available with $CODEBUILD_SRC_DIR_dmptool-commit.
# Do not change version. This is the version of aws buildspec, not the version of your buldspec file.
version: 0.2

phases:
  install:
    runtime-versions:
      # Apollo gives error when building on < 21
      nodejs: 21
  pre_build:
    commands:
      # Set some ENV variables here because CF only allows a limit of 1000 characters in the
      # EnvironmentVariable config for the Pipeline action :(
      - export AWS_VERSION=$(aws --version)

      # Fetch the ECR repository name
      - echo $ECR_REPOSITORY_URI >> .ecr
      - export SHORT_ECR_URI=$(awk '{gsub("$ECR_REPOSITORY_NAME", "");print}' .ecr)
      - rm .ecr

      # Set the repository URI to your ECR image and add an image tag with the first seven characters of the Git
      # commit ID of the source.
      - echo Logging in to Amazon ECR ...
      - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $SHORT_ECR_URI
      - IMAGE_TAG=${COMMIT_HASH:=apollo-latest}
  build:
    commands:
      - echo "Running in ${NODE_ENV} - started on `date`"
      - cd $CODEBUILD_SRC_DIR

      # Install Husky
      - npm install -g husky graphql-codegen eslint jest

      # Install all of the dependencies (including dev so we can compile TS)
      - npm install

      - echo $(ls -lah)

      # Generate all of the GraphQL schema types
      - npm run generate

      # Run the linter checks
      - echo "Running linter checks"
      - npm run lint

      # Run the tests
      - echo "Running tests"
      - npm run test

      # Build the Apollo server to ensure that it can compile
      - npm run build

      # All is good so build the Docker image
      - echo Building the Docker image...
      - docker build -f Dockerfile.aws -t $SHORT_ECR_URI:apollo-latest .
      - docker tag $ECR_REPOSITORY_URI:apollo-latest $SHORT_ECR_URI:$IMAGE_TAG
  post_build:
    commands:
      # Push the Docker image to the ECR repository. Fargate will pick it up an deploy automatically
      - echo Build completed on `date`
      - echo Pushing the Docker images...
      - cd $CODEBUILD_SRC_DIR
      - docker push $SHORT_ECR_URI:apollo-latest
      - docker push $SHORT_ECR_URI:$IMAGE_TAG

      - echo Writing image definitions file...
      - printf '[{"name":"%s","imageUri":"%s"}]' $TASK_DEFINITION_CONTAINER_NAME $ECR_REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json

artifacts:
  # The Deploy step is expecting this name
  files: imagedefinitions.json
